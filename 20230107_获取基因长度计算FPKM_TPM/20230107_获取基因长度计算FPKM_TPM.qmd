---
title: "获取基因长度计算FPKM_TPM"
format: hugo
editor: visual
date: today
knitr:
  opts_chunk: 
    comment: "#>"
    
tags: [生信 RNA-seq]
categories: [生信]
---

<!--more-->

```{r message=FALSE}
library(parallel)         #并行计算  parApply parLapply parSaplly 
library(GenomicFeatures)
library(dplyr)
options(max.print = 10)
```

## 使用GTF文件获取基因长度信息

参考: <https://mp.weixin.qq.com/s/VsVDZPeJiNqwXUgj0mOVVA>

```{r eval=FALSE}


cl <- makeCluster(0.75*detectCores())  #设计启用计算机3/4的核

## 利用GenomicFeatures包导入gtf处理
txdb <- makeTxDbFromGFF("../../post_share_data/Mus_musculus.GRCm39.108.gtf.gz",
                        format="gtf") 

## 提取基因外显子
exons_gene <- exonsBy(txdb, by = "gene") 
head(exons_gene)

## 计算总外显子长度：用reduce去除掉重叠冗余的部分，,width统计长度，最后计算总长度
exons_gene_lens <- parLapply(cl,exons_gene,function(x){sum(width(reduce(x)))}) 
exons_gene_lens[1:10]

##转换为dataframe
geneid_efflen <- data.frame(geneid=names(exons_gene_lens),
                            efflen=as.numeric(exons_gene_lens))
```

一列为基因名ENSEMBL ID 一列为基因长度

```{r}
load("../../post_share_data/geneid_efflen_Mus_GRCm39_108.RData")
head(geneid_efflen)
```

## counts转FPKM

参考: [Counts FPKM RPKM TPM CPM 的转化 (qq.com)](https://mp.weixin.qq.com/s/IUV9dSbRBK1nvetixKOCRw)

```{r}
load("../../post_share_data/counts_dat.RData")


counts_dat_id <- rownames(counts_dat)
geneid_efflen_geneid <- geneid_efflen$geneid

# 获取共有id
comm_id <- intersect(counts_dat_id,geneid_efflen_geneid)


# 过滤，id排序 保持id顺序一致
geneid_efflen <- geneid_efflen[geneid_efflen$geneid %in% comm_id,]
comm_id <- geneid_efflen$geneid
counts_dat <- counts_dat[comm_id,]



# count--counts表达矩阵，efflength基因长度向量 基因和长度要对应
counts2FPKM <- function(count, efflength){    
  
  library(purrr)
  
  # 函数对每一个样本做FPKM
  f <- function(count_one,efflength){
  # counts的每百万缩放因子 (“per million” scaling factor) 深度标准化   
  PMSC_counts <- sum(count_one)/1e6   
  # 每百万reads/Fragments (Reads/Fragments Per Million) 长度标准化  
  FPM <- count_one/PMSC_counts         
  FPM/(efflength/1000)   
  }
  
  # 对全部样本做FPKM
  FPKM_data <- map_dfc(count,f,efflength)
  
  return(FPKM_data)
  
} 


FPKM <- counts2FPKM(count = counts_dat,efflength = geneid_efflen$efflen)

```

## counts转TPM

```{r}


counts2TPM <- function(count, efflength){   
  
  library(purrr)
  
  # 函数对每一个样本做FPKM
  f <- function(count_one,efflength){
    
  #每千碱基reads (reads per kilobase) 长度标准化
  RPK <- count_one/(efflength/1000)      
  #RPK的每百万缩放因子 (“per million” scaling factor ) 深度标准化
  PMSC_rpk <- sum(RPK)/1e6           
  RPK/PMSC_rpk
    
  }
  
  # 对全部样本做FPKM
  TPM_data <- map_dfc(count,f,efflength)
  
  return(TPM_data)

}    

TPM <- counts2TPM(count = counts_dat,efflength = geneid_efflen$efflen)
```

## FPKM转TPM

```{r}
#FPKM与TPM的转化 
FPKM2TPM <- function(fpkm){
  library(purrr)
  TPM_data <- map_dfc(fpkm,~ .x/sum(.x)*1e6   )
} 

TPM2 <- FPKM2TPM(fpkm = FPKM)

```
